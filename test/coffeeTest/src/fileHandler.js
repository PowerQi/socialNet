// Generated by CoffeeScript 1.7.1
var Handler, fs,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

fs = require('fs');

Handler = require('./handler');

module.exports = function() {
  var FileHandler;
  return FileHandler = (function(_super) {
    var contentType, process;

    __extends(FileHandler, _super);

    function FileHandler() {
      return FileHandler.__super__.constructor.apply(this, arguments);
    }

    contentType = function() {
      var postfix;
      postfix = (/\.(.*)/.exec(this.pathname()))[1].toLowerCase();
      switch (postfix) {
        case "jpg":
        case "png":
        case "jpeg":
        case "gif":
          return "img/" + postfix;
        case "css":
          return "text/css";
        default:
          return "text/html";
      }
    };

    FileHandler.prototype.pathname = function() {
      if (!this._pathname) {
        if (this.pathInfo.pathname === "/" || this.pathname.pathname === "") {
          this.pathInfo.pathname = "index";
        }
        if (!/\..+$/.test(this.pathInfo.pathname)) {
          this.pathInfo.pathname += "html";
        }
        this._pathname = this.pathInfo.pathname;
      }
      return this._pathname;
    };

    process = function() {
      console.log("pulic/" + (this.pathname()));
      return fs.readFile("pulic/" + (this.pathname()), "utf-8", (function(_this) {
        return function(err, data) {
          if (err != null) {
            return _this.write("ooops!, 404", 404);
          } else {
            return _this.write(data);
          }
        };
      })(this));
    };

    return FileHandler;

  })(Handler);
};
